// Create react app
npx create-react-app my-app


// install the package to your global node packages. After that, you
always have it available on the command line to bootstrap new React applications.
Command Line
npm install -g create-react-app


// Runs the application in http://localhost:3000
npm start
// Runs the tests
npm test
// Builds the application for production
npm run build

//. I suggest using
const whenever you can. It indicates that you want to keep your data structure immutable even
though values in objects and arrays can get modified. If you want to modify your variable, you can
use let.
Immutability is embraced in React and its ecosystem. That’s why const should be your default
choice when you define a variable. Still, in complex objects the values within can get modified. Be
careful about this behavior.
In your application, you should use const over var.

//ReactDOM
Basically ReactDOM.render() uses a DOM node in your HTML to replace it with your JSX.
That’s how you can easily integrate React in every foreign application. It is not forbidden to use
ReactDOM.render() multiple times across your application. You can use it at multiple places to
bootstrap simple JSX syntax, a React component, multiple React components or a whole application.
But in plain React application you will only use it once to bootstrap your whole component tree.
ReactDOM.render() expects two arguments. The first argument is JSX that gets rendered. The second
argument specifies the place where the React application hooks into your HTML. It expects an
element with an id='root'. You can open your public/index.html file to find the id attribute.

//Hot Module Replacement (HMR) is a tool to reload your application in the browser. The browser
doesn’t perform a page refresh. You can easily activate it in create-react-app. In your src/index.js,
your entry point to React
to de-activate add this to src\index.js
if (module.hot) {
module.hot.accept();
}


//When using onClick={doSomething()}, the doSomething() function would execute immediately
when you open the application in your browser. The expression in the handler is evaluated. Since
the returned value of the function isn’t a function anymore, nothing would happen when you click
the button. But when using onClick={doSomething} whereas doSomething is a function, it would
be executed when clicking the button. The same rules apply for the onDismiss() class method that
is used in your application.
//However, using onClick={this.onDismiss} wouldn’t suffice, because somehow the item.objectID
property needs to be passed to the class method to identify the item that is going to be dismissed.
That’s why it can be wrapped into another function to sneak in the property. The concept is called
higher-order functions in JavaScript and will be explained briefly later on.


//////

• React
– use this.state and setState() to manage your internal component state
– pass functions or class methods to your element handler
– use forms and events in React to add interactions
– unidirectional data flow is an important concept in React
– embrace controlled components
– compose components with children and reusable components
– usage and implementation of ES6 class components and functional stateless components
– approaches to style your components

//
The constructor is only called when an instance of the component is created and inserted in theDOM. The component gets instantiated. That process is called mounting of the component.
The render()method is called during the mount process too, but also when the component updates.Each time when the state or the props of a component change, therender()method of thecomponent is called.

The mounting of a component has two more lifecycle methods:componentWillMount()andcomponentDidMount(). The constructor is called first,componentWillMount()gets called before therender()method andcomponentDidMount()is called after therender()method

he mounting process has 4 lifecycle methods. 
They are invoked in the following order:
•constructor()
•componentWillMount()
•render()
•componentDidMount()

But what about the update lifecycle of a component that happens when the state or the props change?Overall it has 5 lifecycle methods in the following order:
•componentWillReceiveProps()
•shouldComponentUpdate()
•componentWillUpdate()
•render()
•componentDidUpdate()

 there is the unmounting lifecycle. It has only one lifecycle method:componen-tWillUnmount().
• constructor(props) - It is called when the component gets initialized. You can set an initial
component state and bind class methods during that lifecycle method.
• componentWillMount() - It is called before the render() lifecycle method. That’s why it
could be used to set internal component state, because it will not trigger a second rendering
of the component. Generally it is recommended to use the constructor() to set the initial
state.
• render() - This lifecycle method is mandatory and returns the elements as an output of the
component. The method should be pure and therefore shouldn’t modify the component state.
It gets an input as props and state and returns an element.
• componentDidMount() - It is called only once when the component mounted. That’s the
perfect time to do an asynchronous request to fetch data from an API. The fetched data would
get stored in the internal component state to display it in the render() lifecycle method.
• componentWillReceiveProps(nextProps) - The lifecycle method is called during an update
lifecycle. As input you get the next props. You can diff the next props with the previous props,
by using this.props, to apply a different behavior based on the diff. Additionally, you can
set state based on the next props.
• shouldComponentUpdate(nextProps, nextState) - It is always called when the component
updates due to state or props changes. You will use it in mature React applications for
performance optimizations. Depending on a boolean that you return from this lifecycle
method, the component and all its children will render or will not render on an update
lifecycle. You can prevent the render lifecycle method of a component.
• componentWillUpdate(nextProps, nextState) - The lifecycle method is immediately invoked before the render() method. You already have the next props and next state at your
disposal. You can use the method as last opportunity to perform preparations before the render
method gets executed. Note that you cannot trigger setState() anymore. If you want to
compute state based on the next props, you have to use componentWillReceiveProps().
• componentDidUpdate(prevProps, prevState)- The lifecycle method is immediately invoked
after the render() method. You can use it as opportunity to perform DOM operations or to
perform further asynchronous requests.
• componentWillUnmount() - It is called before you destroy your component. You can use the
lifecycle method to perform any clean up tasks.

//install sass
npm i node-sass --save

//install bootstrap
npm install bootstrap uuid --save

import 'bootstrap/dist/css/bootstrap.min.css';
import { v1 as uuid } from "uuid";;

//install redux
npm i --save redux react-redux
